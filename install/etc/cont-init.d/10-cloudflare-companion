#!/usr/bin/with-contenv bash

source /assets/functions/00-container
prepare_service single
PROCESS_NAME="traefik-cloudflare-companion"

### Sanity Test
sanity_var TARGET_DOMAIN "Target Domain"
sanity_var DOMAIN1 "Domain 1"
sanity_var DOMAIN1_ZONE_ID "Domain 1 Zone ID"

### Create the Script
cat <<EOF > /usr/sbin/cloudflare-companion

#!/usr/bin/python
import os
import re
import docker
import CloudFlare
from datetime import datetime

def point_domain(name):
    try:
EOF

### Loop through DOMAIN* Variables
    NUM=$(printenv | sort | grep -c '\DOMAIN.*')
    for (( i = 1; i <= NUM; i++ ))
        do
        domain_tmp=DOMAIN${i}
        if [ "${!domain_tmp}" != "" ] ; then
            cat <<EOF >> /usr/sbin/cloudflare-companion

            domain${i} = os.environ['DOMAIN${i}']
            zone_id${i} = os.environ['DOMAIN${i}_ZONE_ID']
            try:
                if os.environ['DOMAIN${i}_PROXIED'].upper() == "TRUE":
                    proxied_flag${i} = True
                else:
                    proxied_flag${i} = False
            except KeyError:
                proxied_flag${i} = False

            if name.find(domain${i}) != -1:
                try:
                    records = cf.zones.dns_records.get(zone_id${i}, params={u'name':name})
                    data_dict = {
                        u'type': u'CNAME', 
                        u'name': name, 
                        u'content': target_domain, 
                        u'ttl': ${DEFAULT_TTL}, 
                        u'proxied': proxied_flag${i}
                    }
                    if len(records) == 0:
                        cf.zones.dns_records.post(zone_id${i},data=data_dict)
                        print "Created new record: ", name
                    else:
                        for record in records:
                            cf.zones.dns_records.put(zone_id${i}, record["id"], data=data_dict)
                            print "Updated existing record: ", name
                except CloudFlare.exceptions.CloudFlareAPIError as e:
                    pass

EOF
        fi
        done

### Finish rest of script
if [ "${TRAEFIK_VERSION}" = "2" ] ; then
    print_notice "Setting Traefik 2.x Mode"
    cat <<EOF >> /usr/sbin/cloudflare-companion
    except CloudFlare.exceptions.CloudFlareAPIError as e:
        print '** %s - %d %s' % (name, e, e)

def check_container(c):
    for prop in c.attrs.get(u'Config').get(u'Labels'):
         if re.match('traefik.*?\.rule', prop) :
            value = c.attrs.get(u'Config').get(u'Labels').get(prop)
            if 'Host' in value:
                print "container rule value: ", value
                extracted_domains = re.findall(r'Host.*?\(\`(.*?)\`\)', value)
                print "extracted_domains from rule: ", extracted_domains
                cont_id = c.attrs.get(u'Id')
                if len(extracted_domains) > 1:
                    for v in extracted_domains:
                        print "Found Container:",cont_id,"with Multi-Hostname",v
                        point_domain(v)
                elif len(extracted_domains) == 1:
                    print "Found Container:",cont_id,"with Hostname", extracted_domains[0]
                    point_domain(extracted_domains[0])
            else:
                pass

EOF
else
    print_notice "Setting Traefik 1.x Mode"
    cat <<EOF >> /usr/sbin/cloudflare-companion
    except CloudFlare.exceptions.CloudFlareAPIError as e:
        print '** %s - %d %s' % (name, e, e)

def check_container(c):
    for prop in c.attrs.get(u'Config').get(u'Labels'):
         if re.match('traefik.*.frontend.rule', prop) :
            value = c.attrs.get(u'Config').get(u'Labels').get(prop)
            if 'Host:' in value:
                value = value.split("Host:")[1].strip()
                cont_id = c.attrs.get(u'Id')
                if ',' in value:
                    for v in value.split(","):
                        print "Found Container:",cont_id,"with Multi-Hostname",v
                        point_domain(v)
                else:
                    print "Found Container:",cont_id,"with Hostname", value
                    point_domain(value)
            else:
                pass

EOF
fi

cat <<EOF >> /usr/sbin/cloudflare-companion
def init():
    for c in client.containers.list(all=True):
        check_container(c)

target_domain = os.environ['TARGET_DOMAIN']
domain = os.environ['DOMAIN1']

cf = CloudFlare.CloudFlare()
client = docker.from_env()

init()

t = datetime.now().time().strftime("%s")

for event in client.events(since=t, filters={'status': u'start'}, decode=True):
    if event.get(u'status') == u'start':
        try:
            check_container(client.containers.get(event.get(u'id')))
        except docker.errors.NotFound as e:
            pass
EOF

chmod +x /usr/sbin/cloudflare-companion

liftoff
